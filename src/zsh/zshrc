##################################################
# KEY ENVIRONMENT AND SHELL VARIABLES
##################################################

export MAF_CONFIG_BASE_DIR=$(readlink -f $(dirname $(readlink -f $0))/..)

# Paths:
# ...homebrew (Apple Silicon)
export PATH="/opt/homebrew/bin:$PATH"
# ...version managers -- these should come last!
export PATH="$HOME/bin:$HOME/.rvm/bin:$PATH"
# ...pipx
export PATH="$PATH:$HOME/.local/bin"

autoload -U compinit
compinit
setopt complete_in_word
setopt auto_list

setopt autocd
setopt EXTENDED_GLOB
setopt HIST_IGNORE_ALL_DUPS
setopt AUTO_NAME_DIRS
HISTSIZE=200

# Command completion
if [ -f  ~/.zsh/npm_autocomplete.sh ]; then
source ~/.zsh/npm_autocomplete.sh
else
echo "\033[0;91mWARNING\033[0m: .zsh/npm_autocomplete.sh not found; npm autocompletion won't work correctly"
fi

# Default editors
export EDITOR="/Users/matthias/bin/code -n -w"
export PAGER="/usr/bin/less"

# Configure prompt with git status (https://github.com/olivierverdier/zsh-git-prompt)
if [ -f ~/.zsh/git-prompt/zshrc.sh ]; then
source ~/.zsh/git-prompt/zshrc.sh
else
echo "\033[0;91mWARNING\033[0m: .zsh/gitprompt/zshrc.sh not found; zsh prompt won't work correctly"
fi
ZSH_THEME_GIT_PROMPT_NOCACHE=1
PROMPT=$'%{\e[36m%}[%{\e[1;3m%}%!%{\e[0;36m%} %D{%I:%M} %4~/$(git_super_status)%{\e[36m%}%{\e[0;36m%}]%{\e[0m%} '

# Make path elements act as word separators as in tcsh
WORDCHARS='*_-~;!#$%^()[]{}<>'

# Enable zoxide `z` command
if whence zoxide > /dev/null; then
eval "$(zoxide init zsh)"
fi

# ssh-agent
# eval "$(ssh-agent -s)"
# ssh-add -K ~/.ssh/...

# xh uses the Application Support directory for configs and session storage on
# Mac by Rust default; this is the nicer one used by Linux. Also, xh won't
# currently expand `~' so we do it ourselves
export XH_CONFIG_DIR=$(readlink -f ~)/.config/xh


##################################################
# TOOL INITIALIZATION
##################################################

# Enable zoxide (enhanced cd with memory)
[ -x /opt/homebrew/bin/zoxide ] && eval "$(/opt/homebrew/bin/zoxide init zsh)"

# Allow Homebrew to authenticate with GitHub, avoiding rate limiting issues [token expires 2022-08-01]
if [ -f ~/.secret_homebrew_git_access_token ]; then
  export HOMEBREW_GITHUB_API_TOKEN=`cat ~/.secret_homebrew_git_access_token`
fi
if [ "" = "$HOMEBREW_GITHUB_API_TOKEN" ]; then
  echo "\033[0;91mWARNING\033[0m: ~/.secret_homebrew_git_access_token not found; couldn't set \$HOMEBREW_GITHUB_API_TOKEN to avoid rate-limiting problems with GitHub"
fi

##################################################
# ALIASES
##################################################

# Simple command shortcuts
alias grep=egrep
alias ll='ls -lF'
alias x='exa -F'
alias xl='exa -lF --git'
alias md='macdown'
alias code='codium'
alias t='tail -50'
alias tt='tail -150'
alias ttt='tail -500'
alias tf='tail -f'

alias h='history 1 | grep'   # auto-grep history

# directory navigation (see also functions below)
alias dirs='dirs -v'
alias d1='pushd +1'
alias d2='pushd +2'
alias d3='pushd +3'
alias d4='pushd +4'
alias d5='pushd +5'

##################################################
# FUNCTIONS
##################################################

# Navigate up n directory levels
u() {
    cd `perl -e "print +(q:../: x $1);"`
}

# Navigate directory stack with keyboard (MAY NEED TO BE REWRITTEN)
d() {
    dir_index=`dirs -v | pushd_select`;
    if [[ $dir_index != "" ]]; then eval "pushd +$dir_index > /dev/null"; fi
}

# ripgrep with pager (less)
rgl() {
  rg --pretty --color=always $1 | less -R
}

# launch MacDown (supports creating file)
macdown() {
    "$(mdfind kMDItemCFBundleIdentifier=com.uranusjr.macdown | head -n1)/Contents/SharedSupport/bin/macdown" $@
}

#
# GitHub helpers
#

# get name of current repo
function cur_repo {
  git remote -v | grep 'fetch)$'| sed -E 's/(^.*:)|((\.git)?[[:space:]]\([^[:space:]]+\)$)//g'
}

# open GitHub to the current repo
function gh {
  GH_REPO=$(cur_repo)
  if [[ -n $GH_REPO ]]; then
    open "https://github.com/$GH_REPO"
  else
    echo "You're not currently in a repo\n"
  fi
  unset GH_REPO
}

# open GitHub to the current repo and branch
function ghb {
  GH_REPO=$(cur_repo)
  if [[ -n $GH_REPO ]]; then
    GH_BRANCH=$(git branch --show-current)
    if [[ -n $GH_BRANCH ]]; then
      open "https://github.com/$GH_REPO/tree/$GH_BRANCH"
    else
      echo "You're not currently on a named branch\n"
    fi
  else
    echo "You're not currently in a repo\n"
  fi
  unset GH_REPO
  unset GH_BRANCH
}

##################################################
# TOAST CUSTOMIZATIONS
##################################################

export PATH="/usr/local/mysql/bin:$PATH"

# choose a repo and go there
alias g='cd ~/toast/git-repos/`ls ~/toast/git-repos | fzf`'

# go to specific repo
function gr {
  cd ~/toast/git-repos/$1
}

alias gw=./gradlew
alias pb=pizzabox
function pbr {
  pb db refresh -d toast -c "$1"
}

# get name of current repo
function cur_repo {
  git remote -v | grep 'fetch)$'| sed -E 's/(^.*:)|((\.git)?[[:space:]]\([^[:space:]]+\)$)//g'
}

# open GitHub to the current repo
function gh {
  GH_REPO=$(cur_repo)
  if [[ -n $GH_REPO ]]; then
    open "https://github.com/$GH_REPO"
  else
    echo "You're not currently in a repo\n"
  fi
  unset GH_REPO
}

# open GitHub to the current repo and branch
function ghb {
  GH_REPO=$(cur_repo)
  if [[ -n $GH_REPO ]]; then
    GH_BRANCH=$(git branch --show-current)
    if [[ -n $GH_BRANCH ]]; then
      open "https://github.com/$GH_REPO/tree/$GH_BRANCH"
    else
      echo "You're not currently on a named branch\n"
    fi
  else
    echo "You're not currently in a repo\n"
  fi
  unset GH_REPO
  unset GH_BRANCH
}

##################################################
# TOAST STANDARD SETUP
##################################################

source /Users/matthias/.dotfiles/bashrc
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# Created by `pipx` on 2022-09-21 19:47:14
export PATH="$PATH:/Users/matthias/.local/bin"
